---
title: "R Notes 1-3 -- R Practice Session"
format:
  html:
    embed-resources: true
    toc: true
    toc-location: left
    df-print: kable
execute: 
  warning: false
  message: false
---

## Overview

Below are some basic problems to practice the concepts we have learned so far in R.

### Problem 1

Suppose we have the following discrete pmf for X:

| $x$ | $f(x)$ |
|-----|--------|
| 2   | 0.20   |
| 4   | 0.13   |
| 5   | 0.07   |
| 8   | 0.21   |
| 10  | 0.14   |
| 11  | 0.09   |
| 13  | 0.14   |

a)  Create two vectors, one for $x$ and one for $f(x)$.

```{r}

# initialize vectors
x <- c(2, 4, 5, 8, 10, 11, 13)
f_x <- c(0.20, 0.13, 0.07, 0.21, 0.14, 0.09, 0.16)

```

b)  Calculate the expected value of $X$ using your vectors.

```{r}

# E(X) = weighted average of x and f(x)
sum(x * f_x)

```

c)  Calculate $P(X > 7)$ by subsetting the $f(x)$ vector with a logical test.

```{r}

# calculate probability -> add corresponding probabilities where X > 7
sum(f_x[x > 7])

```

d)  Find the mode of $X$ by selecting the correct $x$ value based on a logic check of $f(x)$. NOTE: To check equality, use `==`.

```{r}

# find the X value with the highest probability
x[f_x == max(f_x)]

```

e)  Plot the pmf of $X$.

```{r}

# plot pmf
plot(x = x, y = f_x, type = "h", ylab = "f(x)", main = "Pmf of X")


```

### Problem 2

Generate a random sample from of size $n = 100$ from $\text{Gamma}(\text{shape } (\alpha) = 5, \text{rate } (\beta) = 2.5)$ and save it as a vector.

a)  Count the number of values in your random sample that are greater than 2 using `sum()` on a logical check of your vector.

```{r}

# generate sample
data_sample <- rgamma(n = 100, shape = 5, rate = 2.5)

# count number of obs > 2
sum(data_sample > 2)

```

b)  Calculate the sample probability of less than 1.5 using `mean()` on a logical check of your vector.

```{r}

# P(X < 1.5)
mean(data_sample < 1.5)

# equivalent to 
sum(data_sample < 1.5) / length(data_sample)

```

c)  Search how to and compute the min, max, median, IQR, and range of your random sample.

```{r}

# all summary measures at once
summary(data_sample)

# IQR = Q3 - Q1
quantile(data_sample, probs = 0.75) - quantile(data_sample, probs = 0.25)

```

d)  Create a boxplot of your random sample.

```{r}

# create boxplot
boxplot(data_sample, horizontal = TRUE)

```

e)  Search how to extract any outliers based on your boxplot extract.

```{r}

# extract outliers
boxplot(data_sample, horizontal = TRUE)$out

```
