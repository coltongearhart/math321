---
title: "Lecture / R Notes 3-1 -- Working with Data"
format:
  html:
    embed-resources: true
    toc: true
    toc-location: left
    df-print: kable
execute: 
  warning: false
  message: false
---

## Overview

The goal of these notes is to demonstrate common data manipulation tasks using packages from the **tidyverse**, with a focus on **dplyr**.

```{r}

# load packages
library(tidyverse)

```

## Data analysis 1

We will be working with hypothetical student grade data `data-grades.csv`, which contains information on two test scores from students of multiple sections for a single professor, and enrollment data `data-majors.csv`, which has the students major.

To read in the data, first download it from Canvas and then change the path in the `read_csv()` statement above to where you have saved the data relative to the location of the your homework file. 

```{r}

# load data
data_raw <- read_csv(file = "files/data/data-grades.csv")
data_majors <- read_csv(file = "files/data/data-majors.csv")

# preview data
glimpse(data_raw)
glimpse(data_majors)

```

Now we will go through steps to clean, organize and analyze these the test scores.

### Data manipulations

The goal is to have a single dataset with the following columns:

- `ID`
- `Student`: just two initials
- `Major`
- `Class`: 1 or 2
- `Test_1`: % out of 100
- `Test_2`: % out of 100

1. For the grades data, we need to split the current student column into two variables, one of their initials and one for the class they are in. Use `tidyr::separate_wider_delim()` to do so.

```{r}

# separate Student into initials and class
data_grades <- data_raw %>% 
  separate_wider_delim(cols = Student, delim = "-", names = c("Student", "Class"))
head(data_grades)

```

2. Convert the test scores to percentages (Test 1 is out of 30 points and Test 2 is out of 70 points). Use `mutate()` to do transformations.

```{r}

# convert test grades to %
# -> Test 1 = points out of 30
# -> Test 2 = points out of 70
data_grades <- data_grades %>% 
  mutate(Test_1 = round(Test_1 / 30 * 100, 1),
         Test_2 = round(Test_2 / 70 * 100, 1))
head(data_grades)

```

3. Combine grades data and majors data and then sort alphabetically by student initials within each class. Use `arrange()` to sort the data.

```{r}

# combine grades data and majors data
# then sort by name within class
data_grades <- data_grades %>% 
  left_join(y = data_majors,
            join_by(ID)) %>% 
  arrange(Class, Student)
head(data_grades)

```

### Visualize data

Now that the data is cleaned and organized, lets visualize the Test 1 scores to start with. 

Create two polished plots to visualize Test 1 scores, at least one of which should include a class comparison or major comparison.

```{r}

# create histogram of test 1 grades
ggplot(aes(x = Test_1),
       data = data_grades) + 
  geom_histogram(bins = 8,
                 col = "black",
                 fill = "grey70") + 
  labs(x = "Test 1 %")

# create boxplots by class
ggplot(aes(x = Test_1,
           y = Class),
       data = data_grades) + 
  geom_boxplot(fill = "lightblue") + 
  labs(x = "Test 1 Grades") + 
  theme_bw()

# create boxplots by major
ggplot(aes(x = Test_1,
           y = Major),
       data = data_grades) + 
  geom_boxplot(fill = "lightgreen") + 
  labs(x = "Test 1 Grades") + 
  theme_bw()

```

### Summarize data

Now that we have an idea of the distributions for Test 1, let's summarize them, specifically we want to create an overall summary and a summary by class.

1. Create a test 1 dataset that contains only the Class, Student initials and Test 1 score. Use `select()` to select specific columns.

```{r}

# create test 1 dataset
data_test1 <- data_grades %>% 
  select(Student, Class, Test_1)
head(data_test1)

```

2. Create an object named `data_summary_overall` that summarizes Test 1 scores with the sample size, average and standard deviation. Then add an indicator column and rearrange the columns. Use `summarize()` to aggregate the data.

```{r}

#  aggregate and organize data
data_summary_overall <- data_test1 %>% 
  summarize(n = n(),
            avg = round(mean(Test_1), 1),
            sd = round(sd(Test_1), 1)) %>% 
  mutate(Class = "Overall") %>% 
  select(4, 1:3)
data_summary_overall

```

3. Create another object called `data_summary_section` that performs the same summary functions the previous step, except by Class. To do this, add `.by = ` argument to aggregate data within another variable.

```{r}

# summarize data by class
data_summary_section <- data_test1 %>% 
  summarize(.by = Class,
            n = n(),
            avg = round(mean(Test_1), 1),
            sd = round(sd(Test_1), 1))
data_summary_section

```

4. Combine the overall summary with the class summary rowwise using `bind_rows()`.

```{r}

# combine overall summary with class summary
data_summary <- bind_rows(data_summary_overall,
                          data_summary_section)
data_summary

```

## Data analysis 2

Now we will work with the `shuffled-playlist-clean.csv` data, which contains information about songs in a Spotify playlist. Lets read in and preview the data.

```{r}

# load data
data_music <- read.csv(file = "files/data/shuffled-playlist-clean.csv")

# preview data
head(data_music)

```

Now we will ask several questions about the music dataset that can be answered by working with the data.

### Summarize data

For each of the following questions, use pipes `%>%` (or a series of pipes) to display a mini-dataframe that answers the question (there is no need to save the results into an object).

1. What song has the highest `valence` score? Display only the categorical information about the song (i.e. artist, album, genre, name) and its respective valence score. *HINT: use a `select()` statement in conjunction with `where()` to display only the character variables.*

```{r}

# determine song with highest valence score
# -> filter to row with max value and then display only necessary info
data_music %>%
  filter(valence == max(valence)) %>%
  select(where(is.character), valence)

```
    
2. What is the average energy for hip hop songs?

```{r}

# determine average energy for hip hop songs
# -> filter to genre of interest and then calculate summary
data_music %>%
  filter(genre == "hip hop") %>%
  summarize(avg_energy = mean(energy))

```
    
3. What percentage of songs in the data are by the artist Dessa?

```{r}

# determine percentage of songs that are by the artist Dessa
data_music %>%
  summarize(proportion = mean(artist == "Dessa"))

```

### Grouped and specific summaries

1. Calculate the average `energy`, `tempo` and `loudness` for each `genre`. First do this by having a separate `mean(< variable >)` statement for each.

```{r}

# summarize a few music measures by genre
data_music %>% 
  summarize(.by = genre,
            avg_energy = mean(energy),
            avg_tempo = mean(tempo),
            avg_loudness = mean(loudness))

```

2. Now repeat the calculation using `across()`, which allows us to apply the same function to a set of variables. This is much less cumbersome than typing each mean statement out like before.

```{r}

# use summarize() to aggregate data with across() to specify the list of variables
data_music %>% 
  summarize(.by = genre,
            across(c(energy, tempo, loudness), mean))

```

3. Use the same technique as above to calculate the mean of all numeric variable by `genre`. *HINT: Use `across()` in conjunction with `where()`.*

```{r}

# use where() function to specify which columns to summarize
data_music %>% 
  summarize(.by = genre,
            across(where(is.numeric), mean))

```

4. Determine which pop song is the most danceable (highest danceability). Display only the categorical information about the song and its respective danceability score. *HINT: Think about the series of pipes that we need to do.*

```{r}

# find the most danceable pop song and only display the needed info
# -> use filter() to subset the dataframe by row multiple times (highest dance within only pop)
data_music %>% 
  filter(genre == "pop") %>% 
  filter(danceability == max(danceability)) %>% 
  select(where(is.character), danceability)

```

5. Use the same strategy as 5 to determine which which Adele song has the lowest energy.

```{r}

# find minimum energy within Adele songs
data_music %>% 
  filter(artist == "Adele") %>% 
  filter(energy == min(energy)) %>% 
  select(where(is.character), energy)

```

6. CHALLENGE: Find the artists with the lowest average acousticness for each genre.

```{r}

# find the artists with the lowest average acousticness for each genre
data_music %>% 
  summarize(.by = c(genre, artist),
            avg_acousticness = mean(acousticness)) %>% 
  filter(.by  = genre,
         avg_acousticness == min(avg_acousticness))

```
